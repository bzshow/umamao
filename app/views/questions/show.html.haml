= include_javascripts :request_answer

= render :partial => 'shared/share_header', :locals => { :opts => { :content => @question, :class_name => Question.to_s.underscore }, :content_url => question_url(@question) }

- @current_class = 'question hentry entry post'

- question_body = find_and_preserve(Rails.cache.fetch("rendered_question_#{@question.id}_#{@question.updated_at}"){ markdown(@question.body.present? ? @question.body : '') })

- source = question_path(@question)

- content_for :js do
  = include_javascripts :content_edit, :show_question
  = javascript_include_tag "#{AppConfig.wmd_location}/jquery.wmd.min.js"
  = javascript_include_tag "#{AppConfig.wmd_location}/jquery.wmd.mathjax.js"

- content_for :css do
  = stylesheet_link_tag "#{AppConfig.wmd_location}/wmd.css"

- content_for :head do
  %meta{:name => "keywords", :content => clean_seo_keywords(@question.topics.map(&:title).dup, @question.title)}
  %meta{:name => "description", :content => question_body.gsub(/<\/?[^>]*>/, "")[0, 255] }
  %link{:rel => "canonical", :href => question_url(@question) }

= error_messages_for 'answer'

#question.commentable

  %h1.navtitle.title.entry-title.question-title-col
    &= @question.title
    - if @question.closed
      = " [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

  .body-col
    .body.markdown
      - if @question.closed && @question.close_reason
        .close_reason
          = t(".close_reason")
          = t(@question.close_reason.reason, :scope=>"close_requests.form")
          - if !@question.close_reason.comment.empty?
            .comment
              = find_and_preserve(shapado_auto_link(@question.close_reason.comment))
      .post-text.entry-content
        = question_body

    = render :partial => "shared/classify", :locals => {:classifiable => @question, :ajax_add => true}

    .controls
      .actions
        - if logged_in?
          - if flag = current_user.has_flagged?(@question)
            %span.flagged= "#{t('.flagged_as')} #{t(flag.type, :scope=>'flags.form')}"
          - else
            = link_to t(".flag"), flag_question_path(@question), :class => "flag-link", :id => "question_flag_link", :rel => 'nofollow'

          - if @question.can_be_deleted_by?(current_user)
            = link_to t("scaffold.destroy"), question_path(@question.id), :confirm => "are you sure?", :method => :delete

          - if current_user.mod_of?(@question.group)
            = link_to t(".ban"), ban_path(:question_ids => [@question.id]), :class => "button", :confirm => "are you sure?"
        - if @question.versions.count > 0
          = link_to t("wiki.history.link", :default => "history"), history_question_path(@question)

        - if logged_in?
          - if current_user.can_modify?(@question)
            = link_to t('scaffold.edit'), edit_question_path(@question), :class => "button"

        = link_to t('.add_follow_up_question'), new_question_path(:question => @follow_up_question), :target => '_blank', :class => 'featured'

        #question_flag_div

  = render :partial => "shared/comments", :locals => {:commentable => @question, :source => source, :path_scope => [@question]}

- if ab_test(:answer_with_form_position) == :above
  = render(:partial => 'answer_with_form',
           :locals => { :question => @question,
                        :search_result => @search_result,
                        :answer => @answer })

#search_results
  - if ab_test(:answer_with_form_position) == :above
    .new
  - @search_results.each do |search_result|
    = render(:partial => 'search_results/search_result',
             :locals => { :question => @question,
                          :hide_controls => false,
                          :search_result => search_result })

- if ab_test(:answer_with_form_position) == :below
  = render(:partial => 'answer_with_form',
           :locals => { :question => @question,
                        :search_result => @search_result,
                        :answer => @answer })

= render(:partial => 'bing_results',
         :object => @bing_response[:results],
         :locals => { :question => @question,
                      :bing_results_count => @bing_response[:total_results_count] })

- content_for :sidebar do
  - if logged_in? && current_user != @question.user
    -# Can watch the question
    .follow-info.block.question
      = follow_button @question

  - if logged_in? && (current_user.mod_of?(current_group) || current_user.can_view_offensive_counts_on?(current_group))
    - unless @question.flags.count == 0
      .block
        %h3= t(:flags, :scope => "activerecord.models")
        .content= render :partial => "flags/list", :locals => {:flaggeable => @question}

    - unless @question.close_requests.size == 0
      .block
        %h3= t(:prural_name, :scope => "close_requests.model")
        .content= render :partial => "close_requests/list", :locals => {:question => @question}

  - related_questions = Question.related_questions(@question, :language => find_languages, :per_page => 3)
  - if @follow_up_questions.present?
    .block
      %h3
        = t(".follow_up_questions")
      .content
        %ul.list
          - @follow_up_questions.each do |q|
            %li= link_to h(q.title), question_path(q), :title => truncate(strip_tags(q.body), :length => 200)

  - if !related_questions.empty?
    .block
      %h3= t(".related_questions")
      .content
        %ul.list
          - related_questions.each do |rq|
            %li= link_to h(rq.title), question_path(rq), :title => truncate(strip_tags(rq.body), :length => 200)

  = render :partial => 'shared/share_body', :locals => { :opts => { :content => @question.id, :class_name => Question.to_s.underscore } }

  .block
    .requested_users
      = render :partial => "requested_users", :locals => {:question => @question}


  .question-stats
    %h3= t("questions.show.stats")
    .audience-size
      = t('.question_views',
          :count => @question.views_count)
      = t('.topic_followers',
          :count => @question.topics.map(&:followers_count).inject(0) {|sum, count| sum + count})
    = render_cell :users, :followers, :followed => @question
