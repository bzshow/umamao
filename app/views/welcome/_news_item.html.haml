- title = h(news_item.title)
- origin = news_item.origin
- origin_type = news_item.origin_type.downcase
- action = news_item.news_update.action
- entry = news_item.news_update.entry
- entry_type = news_item.news_update.entry_type.downcase
- question = entry_type == 'question' ? entry : entry.question
- question_link = question_path(question, :r => 1)
- if entry_type == "searchresult"
  - link = trackable_search_result_url(entry, 1)
- else
  - link = question_link

- if !question.banned && !entry.banned #do ab test
  %li.entry.item
    -# News_item Summary
    .summary
      %h3= link_to title, link, :title => truncate(entry.body, :length => 200)
      - if entry_type == "searchresult"
        .search_result_url
          %p
            = shorten_url(entry.url)
      .origin

        .description= t(".#{entry_type}.#{origin_type}.#{action}", :origin => link_to_model(news_item.origin, origin.name), :question => link_to(question.title, question_link, :class => "question_entry"))

      - if entry_type == "answer"
        = render :partial => 'questions/answer', :object => entry, :locals => {:question => question, :answer => entry, :hide_controls => true}

      -# News_item Stats
      .info
        .metadata
          = t("time.ago", :time => time_ago_in_words(entry.created_at))
          \|
          = format_number(question.search_results.count)
          = t(:answer_count, :scope => "activerecord.models", :count => question.search_results.count)
          = render :partial => 'shared/stats_follow', :locals => { :question => question }
    .clear
